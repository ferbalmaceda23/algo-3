TestCase subclass: #AlgoVidTest2	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:08'!test04BuscarUnaPersonaQueNoExisteLanzaUnaExcepcion	|algovid|		algovid := AlgoVid new.		self should: [ algovid diagnosticoDe: 'Fernando' ] raise: PersonaNoEncontradaError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:09'!test05BuscarUnaBurbujaQueNoExisteLanzaUnaExcepcion	|algovid|		algovid := AlgoVid new.		self should: [ algovid burbujaPinchada: 'Clase 1' ] raise: BurbujaNoEncontradaError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/21/2021 23:39'!test08AgregarUnaPersonaCuandoNoHayBurbujasLanzaUnaExcepcion	|algoVid|	algoVid := AlgoVid new.		algoVid nuevaPersona: 'Fernando'.		self should: [algoVid agregarA: 'Fernando' aLaBurbuja: 'Clase 1'] raise: NoHayBurbujasError. ! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:11'!test06BuscarUnColegioNoExistenteLanzaUnaExcepcion	|algovid|		algovid := AlgoVid new.		self should: [ algovid clasesPresencialesEn: 'FADU' ] raise: ColegioNoEncontradoError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:20'!test07UnaPersonaPositivaTieneContactoEstrechoConUnaVacunadaEntoncesLaVacunadaNoPuedeCircular	|algovid|		algovid := AlgoVid new.		algovid nuevaPersona: 'Fernando'.	algovid nuevaPersona: 'Mateo'.		algovid agregarSintoma: 'Tos' a: 'Fernando'.	algovid agregarSintoma: 'Fiebre' a: 'Fernando'.	algovid agregarSintoma: 'Cansancio' a: 'Fernando'.		algovid estaVacunadx: 'Mateo'.		algovid contactoEstrechoEntre: 'Fernando' y: 'Mateo'.		self assert: (algovid diagnosticoDe: 'Fernando') equals: 'Positivo'.	self assert: (algovid diagnosticoDe: 'Mateo') equals: 'Sospechoso'.	self deny: (algovid puedeCircular: 'Mateo').! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:05'!test02Agregar2BurbujasConElMismoNombreLanzaUnaExcepcion		|algovid|		algovid := AlgoVid new.		algovid nuevaBurbuja: 'Aula 1'.		self should: [ algovid nuevaBurbuja: 'Aula 1' ] raise: MismoNombreBurbujaError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/21/2021 23:39'!test09AgregarUnaBurbujaCuandoNoHayColegiosLanzaUnaExcepcion	|algoVid|	 	algoVid := AlgoVid new.		algoVid nuevaBurbuja: 'Clase 1'.		self should: [ algoVid agregarA: 'Clase 1' alColegio: 'FIUBA' ] raise: NoHayColegiosError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/21/2021 23:38'!test10AgregarUnSintomaCuandoNoHayPersonasLanzaUnaExcepcion	|algoVid|		algoVid := AlgoVid new.		self should: [ algoVid agregarSintoma: 'Tos' a: 'Fernando' ] raise: NoHayPersonasError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:06'!test03Agregar2ColegiosConElMismoNombreLanzaUnaExcepcion		|algovid|		algovid := AlgoVid new.		algovid nuevoColegio: 'FADU'.		self should: [ algovid nuevoColegio: 'FADU' ] raise: MismoNombreColegioError.! !!AlgoVidTest2 methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:04'!test01Agregar2PersonasConElMismoNombreLanzaUnaExcepcion		|algovid|		algovid := AlgoVid new.		algovid nuevaPersona: 'Fernando'.		self should: [ algovid nuevaPersona: 'Fernando' ] raise: MismoNombrePersonaError.! !TestCase subclass: #BurbujaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!BurbujaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 10:32'!test03EnLaBurbujaHayUnCasoSospechosoEntoncesNoEstaPinchada	|burbuja persona1 persona2|		burbuja := Burbuja new.	persona1 := Persona new.	persona2 := Persona new.		persona2 agregarSintoma: 'Tos'.		burbuja agregarA: persona1.	burbuja agregarA: persona2.		self assert: persona2 diagnostico equals: 'Sospechoso'.	self deny: burbuja estaPinchada.! !!BurbujaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 00:06'!test01LeAsignoNombreAUnaBurbujaYEsElIndicado	|burbuja|		burbuja := Burbuja conNombre: 'Clase 1'.		self assert: burbuja nombre equals: 'Clase 1'.! !!BurbujaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 10:33'!test02EnLaBurbujaNoHayNingunaPersonaInfectadaEntoncesNoEstaPinchada	|burbuja persona1 persona2|		burbuja := Burbuja new.		persona1 := Persona new.	persona2 := Persona new.		burbuja agregarA: persona1.	burbuja agregarA: persona2.		self assert: persona1 diagnostico equals: 'Negativo'.	self assert: persona2 diagnostico equals: 'Negativo'.	self deny: burbuja estaPinchada.! !!BurbujaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 10:36'!test04EnLaBurbujaTodosSonCasosSospechososEntoncesNoEstaPinchada	|burbuja persona1 persona2|		burbuja := Burbuja new.	persona1 := Persona new.	persona2 := Persona new.		persona1 agregarSintoma: 'Tos'.	persona2 agregarSintoma: 'Fiebre'.		burbuja agregarA: persona1.	burbuja agregarA: persona2.		self assert: persona1 diagnostico equals: 'Sospechoso'.	self assert: persona2 diagnostico equals: 'Sospechoso'.	self deny: burbuja estaPinchada.! !!BurbujaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 23:39'!test06PreguntarSiLaBurbujaEstaPinchadaSinPersonasLanzaUnaExcepcion	|burbuja|		burbuja := Burbuja new.		self should: [ burbuja estaPinchada ] raise: NoHayPersonasError.! !!BurbujaTest methodsFor: 'as yet unclassified' stamp: 'FernandoBalmaceda 5/19/2021 10:40'!test05EnLaBurbujaHayUnCasoPositivoEntonesEstaPinchada	|burbuja persona1 persona2|		burbuja := Burbuja new.	persona1 := Persona new.	persona2 := Persona new.		persona1 agregarSintoma: 'Tos'.	persona1 agregarSintoma: 'Fiebre'.	persona1 agregarSintoma: 'Cansancio'.		persona2 estaVacunadx.		burbuja agregarA: persona1.	burbuja agregarA: persona2.		self assert: persona1 diagnostico equals: 'Positivo'.	self assert: burbuja estaPinchada.! !TestCase subclass: #ColegioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!ColegioTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 00:01'!test03EnElColegioHay2BurbujasNoPinchadasYHayClases	|colegio burbuja1 burbuja2 persona1 persona2 persona3 persona4|		colegio := Colegio new.	burbuja1 := Burbuja conNombre: 'Clase 1'.	burbuja2 := Burbuja conNombre: 'Clase 2'.		persona1 := Persona new.	persona2 := Persona new.	persona3 := Persona new.	persona4 := Persona new.		burbuja1 agregarA: persona1.	burbuja1 agregarA: persona2.	burbuja2 agregarA: persona3.	burbuja2 agregarA: persona4.		colegio agregarBurbuja: burbuja1.	colegio agregarBurbuja: burbuja2.		self assert: colegio hayClases.! !!ColegioTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 23:55'!test02SiNoHayBurbujasLanzaUnaExcepcion		|colegio|		colegio := Colegio new.		self should: [colegio hayClases] raise: NoHayBurbujasError.! !!ColegioTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 23:47'!test01LeAsignoUnNombreAUnColegioYEsElIndicado	|colegio|		colegio := Colegio conNombre: 'UADE'.		self assert: colegio nombre equals: 'UADE'.! !!ColegioTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 10:50'!test05EnElColegioSePinchoEl25PorcientoDeLasBurbujasEntoncesHayClases	|colegio burbuja1 burbuja2 burbuja3 burbuja4 persona1 persona2 persona3 persona4 persona5 persona6	persona7 persona8|		colegio := Colegio new.	burbuja1 := Burbuja new.	burbuja2 := Burbuja new.	burbuja3 := Burbuja new.	burbuja4 := Burbuja new.		persona1 := Persona new.	persona2 := Persona new.	persona3 := Persona new.	persona4 := Persona new.	persona5 := Persona new.	persona6 := Persona new.	persona7 := Persona new.	persona8 := Persona new.		persona1 agregarSintoma: 'Tos'.	persona1 agregarSintoma: 'Fiebre'.	persona1 agregarSintoma: 'Cansancio'.			burbuja1 agregarA: persona1.	burbuja1 agregarA: persona2.		burbuja2 agregarA: persona3.	burbuja2 agregarA: persona4.		burbuja3 agregarA: persona5.	burbuja3 agregarA: persona6.		burbuja4 agregarA: persona7.	burbuja4 agregarA: persona8.		colegio agregarBurbuja: burbuja1.	colegio agregarBurbuja: burbuja2.	colegio agregarBurbuja: burbuja3.	colegio agregarBurbuja: burbuja4.		self assert: persona1 diagnostico equals: 'Positivo'.		self assert: colegio hayClases.! !!ColegioTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 10:41'!test04EnElColegioSePinchoEl50PorcientoDeLasBurbujasEntoncesNoHayClases	|colegio burbuja1 burbuja2 persona1 persona2 persona3 persona4|		colegio := Colegio new.	burbuja1 := Burbuja new.	burbuja2 := Burbuja new.	persona1 := Persona new.	persona2 := Persona new.	persona3 := Persona new.	persona4 := Persona new.		persona1 agregarSintoma: 'Tos'.	persona1 agregarSintoma: 'Diarrea'.	persona1 agregarSintoma: 'Cansancio'.		burbuja1 agregarA: persona1.	burbuja1 agregarA: persona2.	burbuja2 agregarA: persona3.	burbuja2 agregarA: persona4.		colegio agregarBurbuja: burbuja1.	colegio agregarBurbuja: burbuja2.		self deny: colegio hayClases.! !TestCase subclass: #MedicoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 23:40'!test05ElMedicoRecibe3SintomasCon1HabitualDiagnosticaPositivoYNoDejaCircular	|medico|		medico := Medico new.		medico informarSintoma: 'Tos'.	medico informarSintoma: 'Diarrea'.	medico informarSintoma: 'Dolor de cabeza'.		self assert: medico diagnostico equals: 'Positivo'.	self deny: medico loDejaCircular.! !!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:44'!test01ElMedicoDiagnosticaNegativoPorDefault	|medico|		medico := Medico new.		self assert: medico diagnostico equals: 'Negativo'.! !!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:58'!test02ElMedicoPermiteCircularPorDefault	|medico|		medico := Medico new.			self assert: medico loDejaCircular.! !!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 23:38'!test03ElMedicoRecibeUnSintomaDiagnosticaSospechosoYNoDejaCircular	|medico|		medico := Medico new.		medico informarSintoma: 'Tos'.		self assert: medico diagnostico equals: 'Sospechoso'.	self deny: medico loDejaCircular.! !!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 23:44'!test06ElMedicoRecibeMasDe3SintomasDiagnosticaPositivoYNoDejaCircular		|medico|		medico := Medico new.		medico informarSintoma: 'Tos'.	medico informarSintoma: 'Cansancio'.	medico informarSintoma: 'Dolor de cabeza'.	medico informarSintoma: 'Diarrea'.		self assert: medico diagnostico equals: 'Positivo'.	self deny: medico loDejaCircular.! !!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/19/2021 11:23'!test07InformarleAlMedicoUnSintomaYaInformadoLanzaUnaExcepcion	|medico|		medico := Medico new.		medico informarSintoma: 'Tos'.		self should: [ medico informarSintoma: 'Tos' ] raise: SintomaYaAgregadoError.! !!MedicoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 23:39'!test04ElMedicoRecibe3SintomasNoHabitualesDiagnosticaSospechosoYNoDejaCircular	|medico|.		medico := Medico new.		medico informarSintoma: 'Dolor de garganta'.	medico informarSintoma: 'Diarra'.	medico informarSintoma: 'Dolor de cabeza'.		self assert: medico diagnostico equals: 'Sospechoso'.	self deny: medico loDejaCircular.! !TestCase subclass: #PermisoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PermisoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:27'!test05SiAlPermisoSeLeInformaQueUnaPersonaEsEsencialYDeRiesgoNoPermiteLaCirculacion		|permiso|		permiso := Permiso new.		permiso informarVacunacion.	permiso esPersonaDeRiesgo.		self deny: permiso puedeCircular.! !!PermisoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 20:05'!test01ElPermisoNoDejaCircularPorDefault	|permiso|		permiso := Permiso new.		self deny: permiso puedeCircular.! !!PermisoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:33'!test06AlPermisoSeLeInformaQueUnaPersonaEsEsencialEstaVacunadaYEsDeRiesgoYNoPuedeCircular	|permiso|		permiso := Permiso new.		permiso esPersonaDeRiesgo.	permiso esEsencial.	permiso informarVacunacion.		self deny: permiso puedeCircular.! !!PermisoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:24'!test04SiAlPermisoSeLeInformaQueLaPersonaEsDeRiesgoNoPuedeCircular	|permiso|		permiso := Permiso new.		permiso esPersonaDeRiesgo.		self deny: permiso puedeCircular.! !!PermisoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:16'!test03SiAlPermisoSeLeInformaQueUnaPersonaEsEsencialPermiteCircular	|permiso|		permiso := Permiso new.		permiso esEsencial.		self assert: permiso puedeCircular.! !!PermisoTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:14'!test02SiAlPermisoSeLeInformaQueUnaPersonaEstaVacunadaPermiteLaCircular	|permiso|		permiso := Permiso new.		permiso informarVacunacion.		self assert: permiso puedeCircular.! !TestCase subclass: #PersonaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:19'!test09UnaPersonaVacunadaConDiagnosticoPositivoNoPuedeCircular	|persona|		persona := Persona new.		persona agregarSintoma: 'Dolor de cabeza'.	persona agregarSintoma: 'Fiebre'.	persona agregarSintoma: 'Dolor de garganta'.	persona estaVacunadx.		self assert: persona diagnostico equals: 'Positivo'.	self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:15'!test01CreoUnaPersonaConElConstructorYSuNombreEsElCorrecto 	|persona1|.		persona1 := Persona conNombre: 'Fernando'.		self assert: persona1 nombre equals: 'Fernando'.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 22:50'!test17UnaPersonaVacunadaTieneContactoEstrechoConUnaPersonaNegativaYPuedeCircular	|persona1 persona2|		persona1 := Persona new.	persona2 := Persona new.		persona1 estaVacunadx.		persona1 contactoEstrechoCon: persona2.		self assert: persona2 diagnostico equals: 'Negativo'.	self assert: persona1 puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 18:09'!test13UnaPersonaVacunadaEsencialYDeRiesgoNoPuedeCircular		|persona|		persona := Persona new.		persona esPersonaDeRiesgo.	persona esEsencial.	persona estaVacunadx.		self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 18:20'!test16UnaPersonaVacunadaTieneContactoEstrechoConUnaPositivaYNoPuedeCircular	|persona1 persona2|		persona1 := Persona new.	persona2 := Persona new.		persona1 estaVacunadx.	persona2 agregarSintoma: 'Tos'.	persona2 agregarSintoma: 'Fiebre'.	persona2 agregarSintoma: 'Cansancio'.		persona1 contactoEstrechoCon: persona2.		self assert: persona2 diagnostico equals: 'Positivo'.	self deny: persona1 puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/15/2021 18:36'!test04CreoUnaPersonaLeAgregoUnSintomaYSuDiagnosticoEsSospechoso	|persona|			persona := Persona new.		persona agregarSintoma: 'Dolor de cabeza'.		self assert: persona diagnostico equals: 'Sospechoso'.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:07'!test08CreoUnaPersonaLaVacunoLeAgregoUnSintomaYNoPuedeCircular	|persona|	persona := Persona new.		persona agregarSintoma: 'Fiebre'.	persona estaVacunadx.	self assert: persona diagnostico equals: 'Sospechoso'.	self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 18:16'!test15UnaPersonaVacunadaTieneContactoEstrechoConUnSospechosoYNoPuedeCircular	|persona1 persona2|		persona1 := Persona new.	persona2 := Persona new.		persona2 agregarSintoma: 'Tos'.		persona1 contactoEstrechoCon: persona2.		self assert: persona2 diagnostico equals: 'Sospechoso'.	self deny: persona1 puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:24'!test11UnaPersonaEsencialPeroDeRiesgoNoPuedeCircular		|persona|.		persona := Persona new.		persona esEsencial.	persona esPersonaDeRiesgo.		self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:21'!test02CreoUnaPersonaYNoPuedeCircularYTieneDiagnosticoNegativoPorDefault		|persona|		persona := Persona new.		self assert: persona diagnostico equals: 'Negativo'.	self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/15/2021 18:36'!test05CreoUnaPersonaLeAgrego3SintomasNoHabitualesYSuDiagnosticoEsSospechoso	|persona|		persona := Persona new.		persona agregarSintoma: 'Dolor de cabeza'.	persona agregarSintoma: 'Diarrea'.	persona agregarSintoma: 'Dolor de garganta'.		self assert: persona diagnostico equals: 'Sospechoso'.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:22'!test10UnaPersonaVacunadaYEsencialPuedeCircular		|persona|.		persona := Persona new.		persona estaVacunadx.	persona esEsencial.		self assert: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 16:59'!test03CreoUnaPersonaLaVacunoYPuedeCircular		|persona|		persona := Persona new.		persona estaVacunadx.		self assert: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:07'!test07UnaPersonaCon4SintomasNoHabitualesTieneDiagnosticoPositivoYNoPuedeCircular	|persona|	persona := Persona new.		persona agregarSintoma: 'Dolor de cabeza'.	persona agregarSintoma: 'Dolor de garganta'.	persona agregarSintoma: 'Diarrea'.	persona agregarSintoma: 'Perdida del gusto'.	self assert: persona diagnostico equals: 'Positivo'.	self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 18:13'!test14UnaPersonaVacunadaTieneContactoEstrechoConUnNegativoYPuedeCircular	|persona1 persona2|		persona1 := Persona new.	persona2 := Persona new.		persona1 estaVacunadx.		persona1 contactoEstrechoCon: persona2.		self assert: persona2 diagnostico equals: 'Negativo'.	self assert: persona1 puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/15/2021 18:36'!test06CreoUnaPersonaLeAgrego3Sintomas1HabitualYSuDiagnosticoEsPositivo		|persona|		persona := Persona new.		persona agregarSintoma: 'Fiebre'.  	persona agregarSintoma: 'Dolor de cabeza'.  	persona agregarSintoma: 'Diarrea'.		self assert: persona diagnostico equals: 'Positivo'.! !!PersonaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/18/2021 17:25'!test12UnaPersonaVacunadaYDeRiesgoNoPuedeCircular		|persona|		persona := Persona new.		persona esPersonaDeRiesgo.	persona estaVacunadx.		self deny: persona puedeCircular.! !TestCase subclass: #SintomaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!SintomaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/17/2021 00:35'!test03LaTosEsUnSintomaHabitual	|sintoma|	sintoma := Sintoma conNombre: 'Tos'.		self assert: sintoma esHabitual.! !!SintomaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/17/2021 00:34'!test02CreoUnSintomaNoHabitualYEfectivamenteLoEs	|sintoma|	sintoma := Sintoma conNombre: 'Dolor de garganta'.		self deny: sintoma esHabitual.! !!SintomaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/17/2021 00:35'!test04LaFiebreEsUnSintomaHabitual		|sintoma|		sintoma := Sintoma conNombre: 'Fiebre'.		self assert: sintoma esHabitual.! !!SintomaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/17/2021 00:35'!test05ElCansancioEsUnSintomaHabitual		|sintoma|		sintoma := Sintoma conNombre: 'Cansancio'.		self assert: sintoma esHabitual.! !!SintomaTest methodsFor: 'tests' stamp: 'FernandoBalmaceda 5/17/2021 00:34'!test01CreoUnSintomaConElConstructorYSuNombreEsElIndicado		| sintoma |		sintoma := Sintoma conNombre: 'Tos'.		self assert: sintoma nombre equals: 'Tos'.! !